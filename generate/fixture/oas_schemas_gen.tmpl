package ogenapi

import (
	"io"
	"time"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
)

// Ref: #/components/schemas/AdminCard
type AdminCard struct {
	ID                int       `json:"id"`
	UserID            int       `json:"user_id"`
	Name              string    `json:"name"`
	PaymentID         int       `json:"payment_id"`
	Active            bool      `json:"active"`
	SelectedAsDefault bool      `json:"selected_as_default"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *AdminCard) GetID() int {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *AdminCard) GetUserID() int {
	return s.UserID
}

// GetName returns the value of Name.
func (s *AdminCard) GetName() string {
	return s.Name
}

// GetPaymentID returns the value of PaymentID.
func (s *AdminCard) GetPaymentID() int {
	return s.PaymentID
}

// GetActive returns the value of Active.
func (s *AdminCard) GetActive() bool {
	return s.Active
}

// GetSelectedAsDefault returns the value of SelectedAsDefault.
func (s *AdminCard) GetSelectedAsDefault() bool {
	return s.SelectedAsDefault
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AdminCard) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *AdminCard) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *AdminCard) SetID(val int) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *AdminCard) SetUserID(val int) {
	s.UserID = val
}

// SetName sets the value of Name.
func (s *AdminCard) SetName(val string) {
	s.Name = val
}

// SetPaymentID sets the value of PaymentID.
func (s *AdminCard) SetPaymentID(val int) {
	s.PaymentID = val
}

// SetActive sets the value of Active.
func (s *AdminCard) SetActive(val bool) {
	s.Active = val
}

// SetSelectedAsDefault sets the value of SelectedAsDefault.
func (s *AdminCard) SetSelectedAsDefault(val bool) {
	s.SelectedAsDefault = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AdminCard) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *AdminCard) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Merged schema.
type AdminCardList struct {
	Data   []AdminCard `json:"data"`
	Limit  int         `json:"limit"`
	Offset int         `json:"offset"`
	Count  int64       `json:"count"`
}

// GetData returns the value of Data.
func (s *AdminCardList) GetData() []AdminCard {
	return s.Data
}

// GetLimit returns the value of Limit.
func (s *AdminCardList) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *AdminCardList) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *AdminCardList) GetCount() int64 {
	return s.Count
}

// SetData sets the value of Data.
func (s *AdminCardList) SetData(val []AdminCard) {
	s.Data = val
}

// SetLimit sets the value of Limit.
func (s *AdminCardList) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *AdminCardList) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *AdminCardList) SetCount(val int64) {
	s.Count = val
}

func (*AdminCardList) adminCardGetRes() {}

// Ref: #/components/schemas/AdminLocker
type AdminLocker struct {
	ID          int       `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	PhotoMain   string    `json:"photo_main"`
	Active      bool      `json:"active"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *AdminLocker) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *AdminLocker) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AdminLocker) GetDescription() string {
	return s.Description
}

// GetPhotoMain returns the value of PhotoMain.
func (s *AdminLocker) GetPhotoMain() string {
	return s.PhotoMain
}

// GetActive returns the value of Active.
func (s *AdminLocker) GetActive() bool {
	return s.Active
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AdminLocker) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *AdminLocker) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *AdminLocker) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AdminLocker) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AdminLocker) SetDescription(val string) {
	s.Description = val
}

// SetPhotoMain sets the value of PhotoMain.
func (s *AdminLocker) SetPhotoMain(val string) {
	s.PhotoMain = val
}

// SetActive sets the value of Active.
func (s *AdminLocker) SetActive(val bool) {
	s.Active = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AdminLocker) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *AdminLocker) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Merged schema.
type AdminLockerCellGetOK struct {
	Data   []LockerCell `json:"data"`
	Limit  int          `json:"limit"`
	Offset int          `json:"offset"`
	Count  int64        `json:"count"`
}

// GetData returns the value of Data.
func (s *AdminLockerCellGetOK) GetData() []LockerCell {
	return s.Data
}

// GetLimit returns the value of Limit.
func (s *AdminLockerCellGetOK) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *AdminLockerCellGetOK) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *AdminLockerCellGetOK) GetCount() int64 {
	return s.Count
}

// SetData sets the value of Data.
func (s *AdminLockerCellGetOK) SetData(val []LockerCell) {
	s.Data = val
}

// SetLimit sets the value of Limit.
func (s *AdminLockerCellGetOK) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *AdminLockerCellGetOK) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *AdminLockerCellGetOK) SetCount(val int64) {
	s.Count = val
}

func (*AdminLockerCellGetOK) adminLockerCellGetRes() {}

type AdminLockerCellIDGetOK struct {
	Data LockerCell `json:"data"`
}

// GetData returns the value of Data.
func (s *AdminLockerCellIDGetOK) GetData() LockerCell {
	return s.Data
}

// SetData sets the value of Data.
func (s *AdminLockerCellIDGetOK) SetData(val LockerCell) {
	s.Data = val
}

func (*AdminLockerCellIDGetOK) adminLockerCellIDGetRes() {}

type AdminLockerCellIDPutOK struct{}

func (*AdminLockerCellIDPutOK) adminLockerCellIDPutRes() {}

type AdminLockerCellIDStatusPutOK struct{}

func (*AdminLockerCellIDStatusPutOK) adminLockerCellIDStatusPutRes() {}

type AdminLockerCellIDStatusPutReq struct {
	StatusID LockerCellStatus `json:"status_id"`
}

// GetStatusID returns the value of StatusID.
func (s *AdminLockerCellIDStatusPutReq) GetStatusID() LockerCellStatus {
	return s.StatusID
}

// SetStatusID sets the value of StatusID.
func (s *AdminLockerCellIDStatusPutReq) SetStatusID(val LockerCellStatus) {
	s.StatusID = val
}

type AdminLockerCellPostOK struct {
	ID int64 `json:"id"`
}

// GetID returns the value of ID.
func (s *AdminLockerCellPostOK) GetID() int64 {
	return s.ID
}

// SetID sets the value of ID.
func (s *AdminLockerCellPostOK) SetID(val int64) {
	s.ID = val
}

func (*AdminLockerCellPostOK) adminLockerCellPostRes() {}

// Ref: #/components/schemas/AdminLockerCellTrack
type AdminLockerCellTrack struct {
	TrackID            int                 `json:"track_id"`
	LockerID           int                 `json:"locker_id"`
	LockerName         string              `json:"locker_name"`
	LockerCellID       int                 `json:"locker_cell_id"`
	LockerCellName     string              `json:"locker_cell_name"`
	ThingID            int                 `json:"thing_id"`
	ThingName          string              `json:"thing_name"`
	ThingPrice         int64               `json:"thing_price"`
	UserID             int                 `json:"user_id"`
	StatusID           LockerCellStatus    `json:"status_id"`
	StatusName         string              `json:"status_name"`
	CreatedAt          time.Time           `json:"created_at"`
	ClosedRentDuration OptDuration         `json:"closed_rent_duration"`
	ClosedStatusID     OptLockerCellStatus `json:"closed_status_id"`
	ClosedStatusName   OptString           `json:"closed_status_name"`
	ClosedCreatedAt    OptDateTime         `json:"closed_created_at"`
	ClosedPhoto        OptString           `json:"closed_photo"`
	PaymentID          OptInt              `json:"payment_id"`
	PaymentAmount      OptFloat64          `json:"payment_amount"`
	PaymentStatus      OptPaymentStatus    `json:"payment_status"`
}

// GetTrackID returns the value of TrackID.
func (s *AdminLockerCellTrack) GetTrackID() int {
	return s.TrackID
}

// GetLockerID returns the value of LockerID.
func (s *AdminLockerCellTrack) GetLockerID() int {
	return s.LockerID
}

// GetLockerName returns the value of LockerName.
func (s *AdminLockerCellTrack) GetLockerName() string {
	return s.LockerName
}

// GetLockerCellID returns the value of LockerCellID.
func (s *AdminLockerCellTrack) GetLockerCellID() int {
	return s.LockerCellID
}

// GetLockerCellName returns the value of LockerCellName.
func (s *AdminLockerCellTrack) GetLockerCellName() string {
	return s.LockerCellName
}

// GetThingID returns the value of ThingID.
func (s *AdminLockerCellTrack) GetThingID() int {
	return s.ThingID
}

// GetThingName returns the value of ThingName.
func (s *AdminLockerCellTrack) GetThingName() string {
	return s.ThingName
}

// GetThingPrice returns the value of ThingPrice.
func (s *AdminLockerCellTrack) GetThingPrice() int64 {
	return s.ThingPrice
}

// GetUserID returns the value of UserID.
func (s *AdminLockerCellTrack) GetUserID() int {
	return s.UserID
}

// GetStatusID returns the value of StatusID.
func (s *AdminLockerCellTrack) GetStatusID() LockerCellStatus {
	return s.StatusID
}

// GetStatusName returns the value of StatusName.
func (s *AdminLockerCellTrack) GetStatusName() string {
	return s.StatusName
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AdminLockerCellTrack) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetClosedRentDuration returns the value of ClosedRentDuration.
func (s *AdminLockerCellTrack) GetClosedRentDuration() OptDuration {
	return s.ClosedRentDuration
}

// GetClosedStatusID returns the value of ClosedStatusID.
func (s *AdminLockerCellTrack) GetClosedStatusID() OptLockerCellStatus {
	return s.ClosedStatusID
}

// GetClosedStatusName returns the value of ClosedStatusName.
func (s *AdminLockerCellTrack) GetClosedStatusName() OptString {
	return s.ClosedStatusName
}

// GetClosedCreatedAt returns the value of ClosedCreatedAt.
func (s *AdminLockerCellTrack) GetClosedCreatedAt() OptDateTime {
	return s.ClosedCreatedAt
}

// GetClosedPhoto returns the value of ClosedPhoto.
func (s *AdminLockerCellTrack) GetClosedPhoto() OptString {
	return s.ClosedPhoto
}

// GetPaymentID returns the value of PaymentID.
func (s *AdminLockerCellTrack) GetPaymentID() OptInt {
	return s.PaymentID
}

// GetPaymentAmount returns the value of PaymentAmount.
func (s *AdminLockerCellTrack) GetPaymentAmount() OptFloat64 {
	return s.PaymentAmount
}

// GetPaymentStatus returns the value of PaymentStatus.
func (s *AdminLockerCellTrack) GetPaymentStatus() OptPaymentStatus {
	return s.PaymentStatus
}

// SetTrackID sets the value of TrackID.
func (s *AdminLockerCellTrack) SetTrackID(val int) {
	s.TrackID = val
}

// SetLockerID sets the value of LockerID.
func (s *AdminLockerCellTrack) SetLockerID(val int) {
	s.LockerID = val
}

// SetLockerName sets the value of LockerName.
func (s *AdminLockerCellTrack) SetLockerName(val string) {
	s.LockerName = val
}

// SetLockerCellID sets the value of LockerCellID.
func (s *AdminLockerCellTrack) SetLockerCellID(val int) {
	s.LockerCellID = val
}

// SetLockerCellName sets the value of LockerCellName.
func (s *AdminLockerCellTrack) SetLockerCellName(val string) {
	s.LockerCellName = val
}

// SetThingID sets the value of ThingID.
func (s *AdminLockerCellTrack) SetThingID(val int) {
	s.ThingID = val
}

// SetThingName sets the value of ThingName.
func (s *AdminLockerCellTrack) SetThingName(val string) {
	s.ThingName = val
}

// SetThingPrice sets the value of ThingPrice.
func (s *AdminLockerCellTrack) SetThingPrice(val int64) {
	s.ThingPrice = val
}

// SetUserID sets the value of UserID.
func (s *AdminLockerCellTrack) SetUserID(val int) {
	s.UserID = val
}

// SetStatusID sets the value of StatusID.
func (s *AdminLockerCellTrack) SetStatusID(val LockerCellStatus) {
	s.StatusID = val
}

// SetStatusName sets the value of StatusName.
func (s *AdminLockerCellTrack) SetStatusName(val string) {
	s.StatusName = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AdminLockerCellTrack) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetClosedRentDuration sets the value of ClosedRentDuration.
func (s *AdminLockerCellTrack) SetClosedRentDuration(val OptDuration) {
	s.ClosedRentDuration = val
}

// SetClosedStatusID sets the value of ClosedStatusID.
func (s *AdminLockerCellTrack) SetClosedStatusID(val OptLockerCellStatus) {
	s.ClosedStatusID = val
}

// SetClosedStatusName sets the value of ClosedStatusName.
func (s *AdminLockerCellTrack) SetClosedStatusName(val OptString) {
	s.ClosedStatusName = val
}

// SetClosedCreatedAt sets the value of ClosedCreatedAt.
func (s *AdminLockerCellTrack) SetClosedCreatedAt(val OptDateTime) {
	s.ClosedCreatedAt = val
}

// SetClosedPhoto sets the value of ClosedPhoto.
func (s *AdminLockerCellTrack) SetClosedPhoto(val OptString) {
	s.ClosedPhoto = val
}

// SetPaymentID sets the value of PaymentID.
func (s *AdminLockerCellTrack) SetPaymentID(val OptInt) {
	s.PaymentID = val
}

// SetPaymentAmount sets the value of PaymentAmount.
func (s *AdminLockerCellTrack) SetPaymentAmount(val OptFloat64) {
	s.PaymentAmount = val
}

// SetPaymentStatus sets the value of PaymentStatus.
func (s *AdminLockerCellTrack) SetPaymentStatus(val OptPaymentStatus) {
	s.PaymentStatus = val
}

type AdminLockerCellTrackIDPhotoRawGetOKImageDng struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AdminLockerCellTrackIDPhotoRawGetOKImageDng) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AdminLockerCellTrackIDPhotoRawGetOKImageDng) adminLockerCellTrackIDPhotoRawGetRes() {}

type AdminLockerCellTrackIDPhotoRawGetOKImageGIF struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AdminLockerCellTrackIDPhotoRawGetOKImageGIF) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AdminLockerCellTrackIDPhotoRawGetOKImageGIF) adminLockerCellTrackIDPhotoRawGetRes() {}

type AdminLockerCellTrackIDPhotoRawGetOKImageHeic struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AdminLockerCellTrackIDPhotoRawGetOKImageHeic) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AdminLockerCellTrackIDPhotoRawGetOKImageHeic) adminLockerCellTrackIDPhotoRawGetRes() {}

type AdminLockerCellTrackIDPhotoRawGetOKImageHeif struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AdminLockerCellTrackIDPhotoRawGetOKImageHeif) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AdminLockerCellTrackIDPhotoRawGetOKImageHeif) adminLockerCellTrackIDPhotoRawGetRes() {}

type AdminLockerCellTrackIDPhotoRawGetOKImageJpeg struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AdminLockerCellTrackIDPhotoRawGetOKImageJpeg) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AdminLockerCellTrackIDPhotoRawGetOKImageJpeg) adminLockerCellTrackIDPhotoRawGetRes() {}

type AdminLockerCellTrackIDPhotoRawGetOKImagePNG struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AdminLockerCellTrackIDPhotoRawGetOKImagePNG) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AdminLockerCellTrackIDPhotoRawGetOKImagePNG) adminLockerCellTrackIDPhotoRawGetRes() {}

type AdminLockerCellTrackIDPhotoRawGetOKImageRaw struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AdminLockerCellTrackIDPhotoRawGetOKImageRaw) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AdminLockerCellTrackIDPhotoRawGetOKImageRaw) adminLockerCellTrackIDPhotoRawGetRes() {}

type AdminLockerCellTrackIDPhotoRawGetOKImageWEBP struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AdminLockerCellTrackIDPhotoRawGetOKImageWEBP) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AdminLockerCellTrackIDPhotoRawGetOKImageWEBP) adminLockerCellTrackIDPhotoRawGetRes() {}

// Merged schema.
type AdminLockerCellTrackList struct {
	Data   []AdminLockerCellTrack `json:"data"`
	Limit  int                    `json:"limit"`
	Offset int                    `json:"offset"`
	Count  int64                  `json:"count"`
}

// GetData returns the value of Data.
func (s *AdminLockerCellTrackList) GetData() []AdminLockerCellTrack {
	return s.Data
}

// GetLimit returns the value of Limit.
func (s *AdminLockerCellTrackList) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *AdminLockerCellTrackList) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *AdminLockerCellTrackList) GetCount() int64 {
	return s.Count
}

// SetData sets the value of Data.
func (s *AdminLockerCellTrackList) SetData(val []AdminLockerCellTrack) {
	s.Data = val
}

// SetLimit sets the value of Limit.
func (s *AdminLockerCellTrackList) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *AdminLockerCellTrackList) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *AdminLockerCellTrackList) SetCount(val int64) {
	s.Count = val
}

func (*AdminLockerCellTrackList) adminLockerCellTrackGetRes() {}

type AdminLockerIDFilePutOK struct{}

func (*AdminLockerIDFilePutOK) adminLockerIDFilePutRes() {}

type AdminLockerIDFilePutReq struct {
	PhotoMain ht.MultipartFile `json:"photo_main"`
}

// GetPhotoMain returns the value of PhotoMain.
func (s *AdminLockerIDFilePutReq) GetPhotoMain() ht.MultipartFile {
	return s.PhotoMain
}

// SetPhotoMain sets the value of PhotoMain.
func (s *AdminLockerIDFilePutReq) SetPhotoMain(val ht.MultipartFile) {
	s.PhotoMain = val
}

type AdminLockerIDGetOK struct {
	Data AdminLocker `json:"data"`
}

// GetData returns the value of Data.
func (s *AdminLockerIDGetOK) GetData() AdminLocker {
	return s.Data
}

// SetData sets the value of Data.
func (s *AdminLockerIDGetOK) SetData(val AdminLocker) {
	s.Data = val
}

func (*AdminLockerIDGetOK) adminLockerIDGetRes() {}

// Ref: #/components/schemas/AdminLockerInput
type AdminLockerInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Active      bool   `json:"active"`
}

// GetName returns the value of Name.
func (s *AdminLockerInput) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AdminLockerInput) GetDescription() string {
	return s.Description
}

// GetActive returns the value of Active.
func (s *AdminLockerInput) GetActive() bool {
	return s.Active
}

// SetName sets the value of Name.
func (s *AdminLockerInput) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AdminLockerInput) SetDescription(val string) {
	s.Description = val
}

// SetActive sets the value of Active.
func (s *AdminLockerInput) SetActive(val bool) {
	s.Active = val
}

// Merged schema.
type AdminLockerList struct {
	Data   []AdminLocker `json:"data"`
	Limit  int           `json:"limit"`
	Offset int           `json:"offset"`
	Count  int64         `json:"count"`
}

// GetData returns the value of Data.
func (s *AdminLockerList) GetData() []AdminLocker {
	return s.Data
}

// GetLimit returns the value of Limit.
func (s *AdminLockerList) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *AdminLockerList) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *AdminLockerList) GetCount() int64 {
	return s.Count
}

// SetData sets the value of Data.
func (s *AdminLockerList) SetData(val []AdminLocker) {
	s.Data = val
}

// SetLimit sets the value of Limit.
func (s *AdminLockerList) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *AdminLockerList) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *AdminLockerList) SetCount(val int64) {
	s.Count = val
}

func (*AdminLockerList) adminLockerGetRes() {}

// Ref: #/components/schemas/AdminPayment
type AdminPayment struct {
	ID           int           `json:"id"`
	PaymentUID   OptString     `json:"payment_uid"`
	UserID       int           `json:"user_id"`
	Amount       float64       `json:"amount"`
	AmountRefund float64       `json:"amount_refund"`
	Type         PaymentType   `json:"type"`
	Status       PaymentStatus `json:"status"`
	CreatedAt    time.Time     `json:"created_at"`
	UpdatedAt    time.Time     `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *AdminPayment) GetID() int {
	return s.ID
}

// GetPaymentUID returns the value of PaymentUID.
func (s *AdminPayment) GetPaymentUID() OptString {
	return s.PaymentUID
}

// GetUserID returns the value of UserID.
func (s *AdminPayment) GetUserID() int {
	return s.UserID
}

// GetAmount returns the value of Amount.
func (s *AdminPayment) GetAmount() float64 {
	return s.Amount
}

// GetAmountRefund returns the value of AmountRefund.
func (s *AdminPayment) GetAmountRefund() float64 {
	return s.AmountRefund
}

// GetType returns the value of Type.
func (s *AdminPayment) GetType() PaymentType {
	return s.Type
}

// GetStatus returns the value of Status.
func (s *AdminPayment) GetStatus() PaymentStatus {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AdminPayment) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *AdminPayment) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *AdminPayment) SetID(val int) {
	s.ID = val
}

// SetPaymentUID sets the value of PaymentUID.
func (s *AdminPayment) SetPaymentUID(val OptString) {
	s.PaymentUID = val
}

// SetUserID sets the value of UserID.
func (s *AdminPayment) SetUserID(val int) {
	s.UserID = val
}

// SetAmount sets the value of Amount.
func (s *AdminPayment) SetAmount(val float64) {
	s.Amount = val
}

// SetAmountRefund sets the value of AmountRefund.
func (s *AdminPayment) SetAmountRefund(val float64) {
	s.AmountRefund = val
}

// SetType sets the value of Type.
func (s *AdminPayment) SetType(val PaymentType) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *AdminPayment) SetStatus(val PaymentStatus) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AdminPayment) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *AdminPayment) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Merged schema.
type AdminPaymentList struct {
	Data   []AdminPayment `json:"data"`
	Limit  int            `json:"limit"`
	Offset int            `json:"offset"`
	Count  int64          `json:"count"`
}

// GetData returns the value of Data.
func (s *AdminPaymentList) GetData() []AdminPayment {
	return s.Data
}

// GetLimit returns the value of Limit.
func (s *AdminPaymentList) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *AdminPaymentList) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *AdminPaymentList) GetCount() int64 {
	return s.Count
}

// SetData sets the value of Data.
func (s *AdminPaymentList) SetData(val []AdminPayment) {
	s.Data = val
}

// SetLimit sets the value of Limit.
func (s *AdminPaymentList) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *AdminPaymentList) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *AdminPaymentList) SetCount(val int64) {
	s.Count = val
}

func (*AdminPaymentList) adminPaymentGetRes() {}

// Merged schema.
type AdminThingGetOK struct {
	Data   []Thing `json:"data"`
	Limit  int     `json:"limit"`
	Offset int     `json:"offset"`
	Count  int64   `json:"count"`
}

// GetData returns the value of Data.
func (s *AdminThingGetOK) GetData() []Thing {
	return s.Data
}

// GetLimit returns the value of Limit.
func (s *AdminThingGetOK) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *AdminThingGetOK) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *AdminThingGetOK) GetCount() int64 {
	return s.Count
}

// SetData sets the value of Data.
func (s *AdminThingGetOK) SetData(val []Thing) {
	s.Data = val
}

// SetLimit sets the value of Limit.
func (s *AdminThingGetOK) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *AdminThingGetOK) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *AdminThingGetOK) SetCount(val int64) {
	s.Count = val
}

func (*AdminThingGetOK) adminThingGetRes() {}

type AdminThingIDFileDeleteOK struct{}

func (*AdminThingIDFileDeleteOK) adminThingIDFileDeleteRes() {}

type AdminThingIDFilePutOK struct{}

func (*AdminThingIDFilePutOK) adminThingIDFilePutRes() {}

type AdminThingIDFilePutReq struct {
	PhotoMain []ht.MultipartFile `json:"photo_main"`
	Photos    []ht.MultipartFile `json:"photos"`
}

// GetPhotoMain returns the value of PhotoMain.
func (s *AdminThingIDFilePutReq) GetPhotoMain() []ht.MultipartFile {
	return s.PhotoMain
}

// GetPhotos returns the value of Photos.
func (s *AdminThingIDFilePutReq) GetPhotos() []ht.MultipartFile {
	return s.Photos
}

// SetPhotoMain sets the value of PhotoMain.
func (s *AdminThingIDFilePutReq) SetPhotoMain(val []ht.MultipartFile) {
	s.PhotoMain = val
}

// SetPhotos sets the value of Photos.
func (s *AdminThingIDFilePutReq) SetPhotos(val []ht.MultipartFile) {
	s.Photos = val
}

type AdminThingIDGetOK struct {
	Data Thing `json:"data"`
}

// GetData returns the value of Data.
func (s *AdminThingIDGetOK) GetData() Thing {
	return s.Data
}

// SetData sets the value of Data.
func (s *AdminThingIDGetOK) SetData(val Thing) {
	s.Data = val
}

func (*AdminThingIDGetOK) adminThingIDGetRes() {}

type AdminThingIDPutOK struct{}

func (*AdminThingIDPutOK) adminThingIDPutRes() {}

type AdminThingPostOK struct {
	ID int64 `json:"id"`
}

// GetID returns the value of ID.
func (s *AdminThingPostOK) GetID() int64 {
	return s.ID
}

// SetID sets the value of ID.
func (s *AdminThingPostOK) SetID(val int64) {
	s.ID = val
}

func (*AdminThingPostOK) adminThingPostRes() {}

type AdminUser struct {
	Data AdminUserInfo `json:"data"`
}

// GetData returns the value of Data.
func (s *AdminUser) GetData() AdminUserInfo {
	return s.Data
}

// SetData sets the value of Data.
func (s *AdminUser) SetData(val AdminUserInfo) {
	s.Data = val
}

func (*AdminUser) adminUserIDGetRes() {}

// Merged schema.
// Ref: #/components/schemas/AdminUserInfo
type AdminUserInfo struct {
	ID              int           `json:"id"`
	Phone           int64         `json:"phone"`
	FirstName       string        `json:"first_name"`
	LastName        string        `json:"last_name"`
	UpdatedAt       time.Time     `json:"updated_at"`
	CreatedAt       time.Time     `json:"created_at"`
	CountRent       int           `json:"count_rent"`
	AllRentDuration time.Duration `json:"all_rent_duration"`
}

// GetID returns the value of ID.
func (s *AdminUserInfo) GetID() int {
	return s.ID
}

// GetPhone returns the value of Phone.
func (s *AdminUserInfo) GetPhone() int64 {
	return s.Phone
}

// GetFirstName returns the value of FirstName.
func (s *AdminUserInfo) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *AdminUserInfo) GetLastName() string {
	return s.LastName
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *AdminUserInfo) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AdminUserInfo) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetCountRent returns the value of CountRent.
func (s *AdminUserInfo) GetCountRent() int {
	return s.CountRent
}

// GetAllRentDuration returns the value of AllRentDuration.
func (s *AdminUserInfo) GetAllRentDuration() time.Duration {
	return s.AllRentDuration
}

// SetID sets the value of ID.
func (s *AdminUserInfo) SetID(val int) {
	s.ID = val
}

// SetPhone sets the value of Phone.
func (s *AdminUserInfo) SetPhone(val int64) {
	s.Phone = val
}

// SetFirstName sets the value of FirstName.
func (s *AdminUserInfo) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *AdminUserInfo) SetLastName(val string) {
	s.LastName = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *AdminUserInfo) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AdminUserInfo) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetCountRent sets the value of CountRent.
func (s *AdminUserInfo) SetCountRent(val int) {
	s.CountRent = val
}

// SetAllRentDuration sets the value of AllRentDuration.
func (s *AdminUserInfo) SetAllRentDuration(val time.Duration) {
	s.AllRentDuration = val
}

// Merged schema.
type AdminUserList struct {
	Data   []AdminUserInfo `json:"data"`
	Limit  int             `json:"limit"`
	Offset int             `json:"offset"`
	Count  int64           `json:"count"`
}

// GetData returns the value of Data.
func (s *AdminUserList) GetData() []AdminUserInfo {
	return s.Data
}

// GetLimit returns the value of Limit.
func (s *AdminUserList) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *AdminUserList) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *AdminUserList) GetCount() int64 {
	return s.Count
}

// SetData sets the value of Data.
func (s *AdminUserList) SetData(val []AdminUserInfo) {
	s.Data = val
}

// SetLimit sets the value of Limit.
func (s *AdminUserList) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *AdminUserList) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *AdminUserList) SetCount(val int64) {
	s.Count = val
}

func (*AdminUserList) adminUserGetRes() {}

// Ref: #/components/schemas/AppAction
type AppAction struct {
	Type    AppActionType `json:"type"`
	TrackID OptString     `json:"track_id"`
	Text    string        `json:"text"`
	Buttons []AppButton   `json:"buttons"`
}

// GetType returns the value of Type.
func (s *AppAction) GetType() AppActionType {
	return s.Type
}

// GetTrackID returns the value of TrackID.
func (s *AppAction) GetTrackID() OptString {
	return s.TrackID
}

// GetText returns the value of Text.
func (s *AppAction) GetText() string {
	return s.Text
}

// GetButtons returns the value of Buttons.
func (s *AppAction) GetButtons() []AppButton {
	return s.Buttons
}

// SetType sets the value of Type.
func (s *AppAction) SetType(val AppActionType) {
	s.Type = val
}

// SetTrackID sets the value of TrackID.
func (s *AppAction) SetTrackID(val OptString) {
	s.TrackID = val
}

// SetText sets the value of Text.
func (s *AppAction) SetText(val string) {
	s.Text = val
}

// SetButtons sets the value of Buttons.
func (s *AppAction) SetButtons(val []AppButton) {
	s.Buttons = val
}

type AppActionType string

const (
	AppActionTypePopup AppActionType = "popup"
)

// AllValues returns all AppActionType values.
func (AppActionType) AllValues() []AppActionType {
	return []AppActionType{
		AppActionTypePopup,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppActionType) MarshalText() ([]byte, error) {
	switch s {
	case AppActionTypePopup:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppActionType) UnmarshalText(data []byte) error {
	switch AppActionType(data) {
	case AppActionTypePopup:
		*s = AppActionTypePopup
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AppActiveRent
type AppActiveRent struct {
	LockerCellID int           `json:"locker_cell_id"`
	StartTime    time.Time     `json:"start_time"`
	PassedSecond time.Duration `json:"passed_second"`
}

// GetLockerCellID returns the value of LockerCellID.
func (s *AppActiveRent) GetLockerCellID() int {
	return s.LockerCellID
}

// GetStartTime returns the value of StartTime.
func (s *AppActiveRent) GetStartTime() time.Time {
	return s.StartTime
}

// GetPassedSecond returns the value of PassedSecond.
func (s *AppActiveRent) GetPassedSecond() time.Duration {
	return s.PassedSecond
}

// SetLockerCellID sets the value of LockerCellID.
func (s *AppActiveRent) SetLockerCellID(val int) {
	s.LockerCellID = val
}

// SetStartTime sets the value of StartTime.
func (s *AppActiveRent) SetStartTime(val time.Time) {
	s.StartTime = val
}

// SetPassedSecond sets the value of PassedSecond.
func (s *AppActiveRent) SetPassedSecond(val time.Duration) {
	s.PassedSecond = val
}

// Ref: #/components/schemas/AppButton
type AppButton struct {
	Text     string             `json:"text"`
	Deeplink OptDeepLink        `json:"deeplink"`
	Action   OptAppButtonAction `json:"action"`
	Webview  OptString          `json:"webview"`
}

// GetText returns the value of Text.
func (s *AppButton) GetText() string {
	return s.Text
}

// GetDeeplink returns the value of Deeplink.
func (s *AppButton) GetDeeplink() OptDeepLink {
	return s.Deeplink
}

// GetAction returns the value of Action.
func (s *AppButton) GetAction() OptAppButtonAction {
	return s.Action
}

// GetWebview returns the value of Webview.
func (s *AppButton) GetWebview() OptString {
	return s.Webview
}

// SetText sets the value of Text.
func (s *AppButton) SetText(val string) {
	s.Text = val
}

// SetDeeplink sets the value of Deeplink.
func (s *AppButton) SetDeeplink(val OptDeepLink) {
	s.Deeplink = val
}

// SetAction sets the value of Action.
func (s *AppButton) SetAction(val OptAppButtonAction) {
	s.Action = val
}

// SetWebview sets the value of Webview.
func (s *AppButton) SetWebview(val OptString) {
	s.Webview = val
}

type AppButtonAction string

const (
	AppButtonActionRefreshPageClosePopup AppButtonAction = "refresh_page_close_popup"
	AppButtonActionExitApp               AppButtonAction = "exit_app"
)

// AllValues returns all AppButtonAction values.
func (AppButtonAction) AllValues() []AppButtonAction {
	return []AppButtonAction{
		AppButtonActionRefreshPageClosePopup,
		AppButtonActionExitApp,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppButtonAction) MarshalText() ([]byte, error) {
	switch s {
	case AppButtonActionRefreshPageClosePopup:
		return []byte(s), nil
	case AppButtonActionExitApp:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppButtonAction) UnmarshalText(data []byte) error {
	switch AppButtonAction(data) {
	case AppButtonActionRefreshPageClosePopup:
		*s = AppButtonActionRefreshPageClosePopup
		return nil
	case AppButtonActionExitApp:
		*s = AppButtonActionExitApp
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AppError
type AppError struct {
	Code    string       `json:"code"`
	Message string       `json:"message"`
	Action  OptAppAction `json:"action"`
}

// GetCode returns the value of Code.
func (s *AppError) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *AppError) GetMessage() string {
	return s.Message
}

// GetAction returns the value of Action.
func (s *AppError) GetAction() OptAppAction {
	return s.Action
}

// SetCode sets the value of Code.
func (s *AppError) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *AppError) SetMessage(val string) {
	s.Message = val
}

// SetAction sets the value of Action.
func (s *AppError) SetAction(val OptAppAction) {
	s.Action = val
}

func (*AppError) appLockerCellIDFinishPutRes()                    {}
func (*AppError) appLockerCellIDGetRes()                          {}
func (*AppError) appLockerCellIDRentPutRes()                      {}
func (*AppError) appLockerGetRes()                                {}
func (*AppError) appLockerIDCellGetRes()                          {}
func (*AppError) appLoginPostRes()                                {}
func (*AppError) appLoginPutRes()                                 {}
func (*AppError) appPaymentCardGetRes()                           {}
func (*AppError) appPaymentCardIDDeleteRes()                      {}
func (*AppError) appPaymentCardIDPutRes()                         {}
func (*AppError) appPaymentCardPostRes()                          {}
func (*AppError) appPaymentYookassaConfirmationTokenCheckGetRes() {}
func (*AppError) appPaymentYookassaConfirmationTokenGetRes()      {}
func (*AppError) appRentGetRes()                                  {}
func (*AppError) appUserGetRes()                                  {}
func (*AppError) appUserPutRes()                                  {}

// Ref: #/components/schemas/AppLocker
type AppLocker struct {
	ID    int    `json:"id"`
	Name  string `json:"name"`
	Photo string `json:"photo"`
}

// GetID returns the value of ID.
func (s *AppLocker) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *AppLocker) GetName() string {
	return s.Name
}

// GetPhoto returns the value of Photo.
func (s *AppLocker) GetPhoto() string {
	return s.Photo
}

// SetID sets the value of ID.
func (s *AppLocker) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AppLocker) SetName(val string) {
	s.Name = val
}

// SetPhoto sets the value of Photo.
func (s *AppLocker) SetPhoto(val string) {
	s.Photo = val
}

// Ref: #/components/schemas/AppLockerCell
type AppLockerCell struct {
	ID         int              `json:"id"`
	Name       string           `json:"name"`
	StatusID   LockerCellStatus `json:"status_id"`
	StatusName string           `json:"status_name"`
	ThingID    int              `json:"thing_id"`
	ThingName  string           `json:"thing_name"`
	// Цена за минуты аренды.
	ThingPrice int       `json:"thing_price"`
	ThingPhoto OptString `json:"thing_photo"`
}

// GetID returns the value of ID.
func (s *AppLockerCell) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *AppLockerCell) GetName() string {
	return s.Name
}

// GetStatusID returns the value of StatusID.
func (s *AppLockerCell) GetStatusID() LockerCellStatus {
	return s.StatusID
}

// GetStatusName returns the value of StatusName.
func (s *AppLockerCell) GetStatusName() string {
	return s.StatusName
}

// GetThingID returns the value of ThingID.
func (s *AppLockerCell) GetThingID() int {
	return s.ThingID
}

// GetThingName returns the value of ThingName.
func (s *AppLockerCell) GetThingName() string {
	return s.ThingName
}

// GetThingPrice returns the value of ThingPrice.
func (s *AppLockerCell) GetThingPrice() int {
	return s.ThingPrice
}

// GetThingPhoto returns the value of ThingPhoto.
func (s *AppLockerCell) GetThingPhoto() OptString {
	return s.ThingPhoto
}

// SetID sets the value of ID.
func (s *AppLockerCell) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AppLockerCell) SetName(val string) {
	s.Name = val
}

// SetStatusID sets the value of StatusID.
func (s *AppLockerCell) SetStatusID(val LockerCellStatus) {
	s.StatusID = val
}

// SetStatusName sets the value of StatusName.
func (s *AppLockerCell) SetStatusName(val string) {
	s.StatusName = val
}

// SetThingID sets the value of ThingID.
func (s *AppLockerCell) SetThingID(val int) {
	s.ThingID = val
}

// SetThingName sets the value of ThingName.
func (s *AppLockerCell) SetThingName(val string) {
	s.ThingName = val
}

// SetThingPrice sets the value of ThingPrice.
func (s *AppLockerCell) SetThingPrice(val int) {
	s.ThingPrice = val
}

// SetThingPhoto sets the value of ThingPhoto.
func (s *AppLockerCell) SetThingPhoto(val OptString) {
	s.ThingPhoto = val
}

type AppLockerCellIDFinishPutReq struct {
	Photo ht.MultipartFile `json:"photo"`
}

// GetPhoto returns the value of Photo.
func (s *AppLockerCellIDFinishPutReq) GetPhoto() ht.MultipartFile {
	return s.Photo
}

// SetPhoto sets the value of Photo.
func (s *AppLockerCellIDFinishPutReq) SetPhoto(val ht.MultipartFile) {
	s.Photo = val
}

type AppLockerCellIDGetOK struct {
	Data          AppLockerCellInfo `json:"data"`
	Action        OptAppAction      `json:"action"`
	AppActiveRent OptAppActiveRent  `json:"app_active_rent"`
}

// GetData returns the value of Data.
func (s *AppLockerCellIDGetOK) GetData() AppLockerCellInfo {
	return s.Data
}

// GetAction returns the value of Action.
func (s *AppLockerCellIDGetOK) GetAction() OptAppAction {
	return s.Action
}

// GetAppActiveRent returns the value of AppActiveRent.
func (s *AppLockerCellIDGetOK) GetAppActiveRent() OptAppActiveRent {
	return s.AppActiveRent
}

// SetData sets the value of Data.
func (s *AppLockerCellIDGetOK) SetData(val AppLockerCellInfo) {
	s.Data = val
}

// SetAction sets the value of Action.
func (s *AppLockerCellIDGetOK) SetAction(val OptAppAction) {
	s.Action = val
}

// SetAppActiveRent sets the value of AppActiveRent.
func (s *AppLockerCellIDGetOK) SetAppActiveRent(val OptAppActiveRent) {
	s.AppActiveRent = val
}

func (*AppLockerCellIDGetOK) appLockerCellIDGetRes() {}

// Merged schema.
// Ref: #/components/schemas/AppLockerCellInfo
type AppLockerCellInfo struct {
	ID         int              `json:"id"`
	Name       string           `json:"name"`
	StatusID   LockerCellStatus `json:"status_id"`
	StatusName string           `json:"status_name"`
	ThingID    int              `json:"thing_id"`
	ThingName  string           `json:"thing_name"`
	// Цена за минуты аренды.
	ThingPrice       int       `json:"thing_price"`
	ThingPhoto       OptString `json:"thing_photo"`
	ThingDescription OptString `json:"thing_description"`
	ThingImages      []string  `json:"thing_images"`
}

// GetID returns the value of ID.
func (s *AppLockerCellInfo) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *AppLockerCellInfo) GetName() string {
	return s.Name
}

// GetStatusID returns the value of StatusID.
func (s *AppLockerCellInfo) GetStatusID() LockerCellStatus {
	return s.StatusID
}

// GetStatusName returns the value of StatusName.
func (s *AppLockerCellInfo) GetStatusName() string {
	return s.StatusName
}

// GetThingID returns the value of ThingID.
func (s *AppLockerCellInfo) GetThingID() int {
	return s.ThingID
}

// GetThingName returns the value of ThingName.
func (s *AppLockerCellInfo) GetThingName() string {
	return s.ThingName
}

// GetThingPrice returns the value of ThingPrice.
func (s *AppLockerCellInfo) GetThingPrice() int {
	return s.ThingPrice
}

// GetThingPhoto returns the value of ThingPhoto.
func (s *AppLockerCellInfo) GetThingPhoto() OptString {
	return s.ThingPhoto
}

// GetThingDescription returns the value of ThingDescription.
func (s *AppLockerCellInfo) GetThingDescription() OptString {
	return s.ThingDescription
}

// GetThingImages returns the value of ThingImages.
func (s *AppLockerCellInfo) GetThingImages() []string {
	return s.ThingImages
}

// SetID sets the value of ID.
func (s *AppLockerCellInfo) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AppLockerCellInfo) SetName(val string) {
	s.Name = val
}

// SetStatusID sets the value of StatusID.
func (s *AppLockerCellInfo) SetStatusID(val LockerCellStatus) {
	s.StatusID = val
}

// SetStatusName sets the value of StatusName.
func (s *AppLockerCellInfo) SetStatusName(val string) {
	s.StatusName = val
}

// SetThingID sets the value of ThingID.
func (s *AppLockerCellInfo) SetThingID(val int) {
	s.ThingID = val
}

// SetThingName sets the value of ThingName.
func (s *AppLockerCellInfo) SetThingName(val string) {
	s.ThingName = val
}

// SetThingPrice sets the value of ThingPrice.
func (s *AppLockerCellInfo) SetThingPrice(val int) {
	s.ThingPrice = val
}

// SetThingPhoto sets the value of ThingPhoto.
func (s *AppLockerCellInfo) SetThingPhoto(val OptString) {
	s.ThingPhoto = val
}

// SetThingDescription sets the value of ThingDescription.
func (s *AppLockerCellInfo) SetThingDescription(val OptString) {
	s.ThingDescription = val
}

// SetThingImages sets the value of ThingImages.
func (s *AppLockerCellInfo) SetThingImages(val []string) {
	s.ThingImages = val
}

type AppLockerGetOK struct {
	Data   []AppLocker  `json:"data"`
	Action OptAppAction `json:"action"`
}

// GetData returns the value of Data.
func (s *AppLockerGetOK) GetData() []AppLocker {
	return s.Data
}

// GetAction returns the value of Action.
func (s *AppLockerGetOK) GetAction() OptAppAction {
	return s.Action
}

// SetData sets the value of Data.
func (s *AppLockerGetOK) SetData(val []AppLocker) {
	s.Data = val
}

// SetAction sets the value of Action.
func (s *AppLockerGetOK) SetAction(val OptAppAction) {
	s.Action = val
}

func (*AppLockerGetOK) appLockerGetRes() {}

type AppLoginPostOK struct{}

func (*AppLoginPostOK) appLoginPostRes() {}

type AppLoginPostReq struct {
	Phone Phone `json:"phone"`
}

// GetPhone returns the value of Phone.
func (s *AppLoginPostReq) GetPhone() Phone {
	return s.Phone
}

// SetPhone sets the value of Phone.
func (s *AppLoginPostReq) SetPhone(val Phone) {
	s.Phone = val
}

type AppLoginPutOK struct {
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *AppLoginPutOK) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *AppLoginPutOK) SetToken(val string) {
	s.Token = val
}

func (*AppLoginPutOK) appLoginPutRes() {}

type AppLoginPutReq struct {
	Phone Phone `json:"phone"`
	Code  int   `json:"code"`
}

// GetPhone returns the value of Phone.
func (s *AppLoginPutReq) GetPhone() Phone {
	return s.Phone
}

// GetCode returns the value of Code.
func (s *AppLoginPutReq) GetCode() int {
	return s.Code
}

// SetPhone sets the value of Phone.
func (s *AppLoginPutReq) SetPhone(val Phone) {
	s.Phone = val
}

// SetCode sets the value of Code.
func (s *AppLoginPutReq) SetCode(val int) {
	s.Code = val
}

type AppPaymentCardGetOK struct {
	Data   []Card       `json:"data"`
	Action OptAppAction `json:"action"`
}

// GetData returns the value of Data.
func (s *AppPaymentCardGetOK) GetData() []Card {
	return s.Data
}

// GetAction returns the value of Action.
func (s *AppPaymentCardGetOK) GetAction() OptAppAction {
	return s.Action
}

// SetData sets the value of Data.
func (s *AppPaymentCardGetOK) SetData(val []Card) {
	s.Data = val
}

// SetAction sets the value of Action.
func (s *AppPaymentCardGetOK) SetAction(val OptAppAction) {
	s.Action = val
}

func (*AppPaymentCardGetOK) appPaymentCardGetRes() {}

type AppPaymentCardPostOK struct {
	ConfirmURL string `json:"confirm_url"`
}

// GetConfirmURL returns the value of ConfirmURL.
func (s *AppPaymentCardPostOK) GetConfirmURL() string {
	return s.ConfirmURL
}

// SetConfirmURL sets the value of ConfirmURL.
func (s *AppPaymentCardPostOK) SetConfirmURL(val string) {
	s.ConfirmURL = val
}

func (*AppPaymentCardPostOK) appPaymentCardPostRes() {}

type AppPaymentYookassaConfirmationTokenCheckGetOKApplicationJSON struct {
	Status PaymentStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *AppPaymentYookassaConfirmationTokenCheckGetOKApplicationJSON) GetStatus() PaymentStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *AppPaymentYookassaConfirmationTokenCheckGetOKApplicationJSON) SetStatus(val PaymentStatus) {
	s.Status = val
}

func (*AppPaymentYookassaConfirmationTokenCheckGetOKApplicationJSON) appPaymentYookassaConfirmationTokenCheckGetRes() {
}

type AppPaymentYookassaConfirmationTokenCheckGetOKTextHTML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AppPaymentYookassaConfirmationTokenCheckGetOKTextHTML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AppPaymentYookassaConfirmationTokenCheckGetOKTextHTML) appPaymentYookassaConfirmationTokenCheckGetRes() {
}

type AppPaymentYookassaConfirmationTokenGetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AppPaymentYookassaConfirmationTokenGetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AppPaymentYookassaConfirmationTokenGetOK) appPaymentYookassaConfirmationTokenGetRes() {}

// Если аренда закрыта \
// Будут поля closed_*
// Если аренду закрыл администратор \
// В closed_status_id будет статус Заблокирован иначе Активен \.
// Ref: #/components/schemas/AppRent
type AppRent struct {
	ID           int    `json:"id"`
	LockerCellID int    `json:"locker_cell_id"`
	ThingID      int    `json:"thing_id"`
	ThingName    string `json:"thing_name"`
	// Дата создания аренды.
	CreatedAt time.Time `json:"created_at"`
	// Дата закрытия аренды.
	ClosedCreatedAt    OptDateTime         `json:"closed_created_at"`
	ClosedStatusID     OptLockerCellStatus `json:"closed_status_id"`
	ClosedRentDuration OptDuration         `json:"closed_rent_duration"`
	PaymentAmount      OptFloat64          `json:"payment_amount"`
	PaymentStatus      OptPaymentStatus    `json:"payment_status"`
}

// GetID returns the value of ID.
func (s *AppRent) GetID() int {
	return s.ID
}

// GetLockerCellID returns the value of LockerCellID.
func (s *AppRent) GetLockerCellID() int {
	return s.LockerCellID
}

// GetThingID returns the value of ThingID.
func (s *AppRent) GetThingID() int {
	return s.ThingID
}

// GetThingName returns the value of ThingName.
func (s *AppRent) GetThingName() string {
	return s.ThingName
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AppRent) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetClosedCreatedAt returns the value of ClosedCreatedAt.
func (s *AppRent) GetClosedCreatedAt() OptDateTime {
	return s.ClosedCreatedAt
}

// GetClosedStatusID returns the value of ClosedStatusID.
func (s *AppRent) GetClosedStatusID() OptLockerCellStatus {
	return s.ClosedStatusID
}

// GetClosedRentDuration returns the value of ClosedRentDuration.
func (s *AppRent) GetClosedRentDuration() OptDuration {
	return s.ClosedRentDuration
}

// GetPaymentAmount returns the value of PaymentAmount.
func (s *AppRent) GetPaymentAmount() OptFloat64 {
	return s.PaymentAmount
}

// GetPaymentStatus returns the value of PaymentStatus.
func (s *AppRent) GetPaymentStatus() OptPaymentStatus {
	return s.PaymentStatus
}

// SetID sets the value of ID.
func (s *AppRent) SetID(val int) {
	s.ID = val
}

// SetLockerCellID sets the value of LockerCellID.
func (s *AppRent) SetLockerCellID(val int) {
	s.LockerCellID = val
}

// SetThingID sets the value of ThingID.
func (s *AppRent) SetThingID(val int) {
	s.ThingID = val
}

// SetThingName sets the value of ThingName.
func (s *AppRent) SetThingName(val string) {
	s.ThingName = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AppRent) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetClosedCreatedAt sets the value of ClosedCreatedAt.
func (s *AppRent) SetClosedCreatedAt(val OptDateTime) {
	s.ClosedCreatedAt = val
}

// SetClosedStatusID sets the value of ClosedStatusID.
func (s *AppRent) SetClosedStatusID(val OptLockerCellStatus) {
	s.ClosedStatusID = val
}

// SetClosedRentDuration sets the value of ClosedRentDuration.
func (s *AppRent) SetClosedRentDuration(val OptDuration) {
	s.ClosedRentDuration = val
}

// SetPaymentAmount sets the value of PaymentAmount.
func (s *AppRent) SetPaymentAmount(val OptFloat64) {
	s.PaymentAmount = val
}

// SetPaymentStatus sets the value of PaymentStatus.
func (s *AppRent) SetPaymentStatus(val OptPaymentStatus) {
	s.PaymentStatus = val
}

// Merged schema.
type AppRentGetOK struct {
	Limit  int       `json:"limit"`
	Offset int       `json:"offset"`
	Count  int64     `json:"count"`
	Data   []AppRent `json:"data"`
}

// GetLimit returns the value of Limit.
func (s *AppRentGetOK) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *AppRentGetOK) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *AppRentGetOK) GetCount() int64 {
	return s.Count
}

// GetData returns the value of Data.
func (s *AppRentGetOK) GetData() []AppRent {
	return s.Data
}

// SetLimit sets the value of Limit.
func (s *AppRentGetOK) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *AppRentGetOK) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *AppRentGetOK) SetCount(val int64) {
	s.Count = val
}

// SetData sets the value of Data.
func (s *AppRentGetOK) SetData(val []AppRent) {
	s.Data = val
}

func (*AppRentGetOK) appRentGetRes() {}

// Ref: #/components/schemas/AppUser
type AppUser struct {
	Phone     string `json:"phone"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// GetPhone returns the value of Phone.
func (s *AppUser) GetPhone() string {
	return s.Phone
}

// GetFirstName returns the value of FirstName.
func (s *AppUser) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *AppUser) GetLastName() string {
	return s.LastName
}

// SetPhone sets the value of Phone.
func (s *AppUser) SetPhone(val string) {
	s.Phone = val
}

// SetFirstName sets the value of FirstName.
func (s *AppUser) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *AppUser) SetLastName(val string) {
	s.LastName = val
}

type AppUserGetOK struct {
	Data   AppUser      `json:"data"`
	Action OptAppAction `json:"action"`
}

// GetData returns the value of Data.
func (s *AppUserGetOK) GetData() AppUser {
	return s.Data
}

// GetAction returns the value of Action.
func (s *AppUserGetOK) GetAction() OptAppAction {
	return s.Action
}

// SetData sets the value of Data.
func (s *AppUserGetOK) SetData(val AppUser) {
	s.Data = val
}

// SetAction sets the value of Action.
func (s *AppUserGetOK) SetAction(val OptAppAction) {
	s.Action = val
}

func (*AppUserGetOK) appUserGetRes() {}

type AppUserPutReq struct {
	Data AppUserUpdate `json:"data"`
}

// GetData returns the value of Data.
func (s *AppUserPutReq) GetData() AppUserUpdate {
	return s.Data
}

// SetData sets the value of Data.
func (s *AppUserPutReq) SetData(val AppUserUpdate) {
	s.Data = val
}

// Ref: #/components/schemas/AppUserUpdate
type AppUserUpdate struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// GetFirstName returns the value of FirstName.
func (s *AppUserUpdate) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *AppUserUpdate) GetLastName() string {
	return s.LastName
}

// SetFirstName sets the value of FirstName.
func (s *AppUserUpdate) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *AppUserUpdate) SetLastName(val string) {
	s.LastName = val
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/Card
type Card struct {
	ID        int     `json:"id"`
	Name      string  `json:"name"`
	IsDefault OptBool `json:"is_default"`
}

// GetID returns the value of ID.
func (s *Card) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *Card) GetName() string {
	return s.Name
}

// GetIsDefault returns the value of IsDefault.
func (s *Card) GetIsDefault() OptBool {
	return s.IsDefault
}

// SetID sets the value of ID.
func (s *Card) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Card) SetName(val string) {
	s.Name = val
}

// SetIsDefault sets the value of IsDefault.
func (s *Card) SetIsDefault(val OptBool) {
	s.IsDefault = val
}

// Нативные страницы мобильного приложения.
// Ref: #/components/schemas/DeepLink
type DeepLink struct {
	Code  DeepLinkCode `json:"code"`
	Value string       `json:"value"`
}

// GetCode returns the value of Code.
func (s *DeepLink) GetCode() DeepLinkCode {
	return s.Code
}

// GetValue returns the value of Value.
func (s *DeepLink) GetValue() string {
	return s.Value
}

// SetCode sets the value of Code.
func (s *DeepLink) SetCode(val DeepLinkCode) {
	s.Code = val
}

// SetValue sets the value of Value.
func (s *DeepLink) SetValue(val string) {
	s.Value = val
}

type DeepLinkCode string

const (
	DeepLinkCodePhoneEnter       DeepLinkCode = "phone_enter"
	DeepLinkCodePhoneCheck       DeepLinkCode = "phone_check"
	DeepLinkCodeLockerList       DeepLinkCode = "locker_list"
	DeepLinkCodeLockerCellList   DeepLinkCode = "locker_cell_list"
	DeepLinkCodeLockerCell       DeepLinkCode = "locker_cell"
	DeepLinkCodeLockerCellRent   DeepLinkCode = "locker_cell_rent"
	DeepLinkCodeLockerCellFinish DeepLinkCode = "locker_cell_finish"
	DeepLinkCodeProfile          DeepLinkCode = "profile"
	DeepLinkCodeCards            DeepLinkCode = "cards"
)

// AllValues returns all DeepLinkCode values.
func (DeepLinkCode) AllValues() []DeepLinkCode {
	return []DeepLinkCode{
		DeepLinkCodePhoneEnter,
		DeepLinkCodePhoneCheck,
		DeepLinkCodeLockerList,
		DeepLinkCodeLockerCellList,
		DeepLinkCodeLockerCell,
		DeepLinkCodeLockerCellRent,
		DeepLinkCodeLockerCellFinish,
		DeepLinkCodeProfile,
		DeepLinkCodeCards,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeepLinkCode) MarshalText() ([]byte, error) {
	switch s {
	case DeepLinkCodePhoneEnter:
		return []byte(s), nil
	case DeepLinkCodePhoneCheck:
		return []byte(s), nil
	case DeepLinkCodeLockerList:
		return []byte(s), nil
	case DeepLinkCodeLockerCellList:
		return []byte(s), nil
	case DeepLinkCodeLockerCell:
		return []byte(s), nil
	case DeepLinkCodeLockerCellRent:
		return []byte(s), nil
	case DeepLinkCodeLockerCellFinish:
		return []byte(s), nil
	case DeepLinkCodeProfile:
		return []byte(s), nil
	case DeepLinkCodeCards:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeepLinkCode) UnmarshalText(data []byte) error {
	switch DeepLinkCode(data) {
	case DeepLinkCodePhoneEnter:
		*s = DeepLinkCodePhoneEnter
		return nil
	case DeepLinkCodePhoneCheck:
		*s = DeepLinkCodePhoneCheck
		return nil
	case DeepLinkCodeLockerList:
		*s = DeepLinkCodeLockerList
		return nil
	case DeepLinkCodeLockerCellList:
		*s = DeepLinkCodeLockerCellList
		return nil
	case DeepLinkCodeLockerCell:
		*s = DeepLinkCodeLockerCell
		return nil
	case DeepLinkCodeLockerCellRent:
		*s = DeepLinkCodeLockerCellRent
		return nil
	case DeepLinkCodeLockerCellFinish:
		*s = DeepLinkCodeLockerCellFinish
		return nil
	case DeepLinkCodeProfile:
		*s = DeepLinkCodeProfile
		return nil
	case DeepLinkCodeCards:
		*s = DeepLinkCodeCards
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EmptyRes struct{}

func (*EmptyRes) adminLockerIDPutRes()         {}
func (*EmptyRes) adminSMSPhonePutRes()         {}
func (*EmptyRes) appLockerCellIDFinishPutRes() {}
func (*EmptyRes) appLockerCellIDRentPutRes()   {}
func (*EmptyRes) appPaymentCardIDDeleteRes()   {}
func (*EmptyRes) appPaymentCardIDPutRes()      {}
func (*EmptyRes) appUserPutRes()               {}

// Ref: #/components/schemas/Error
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) adminCardGetRes()                      {}
func (*Error) adminLockerCellGetRes()                {}
func (*Error) adminLockerCellIDGetRes()              {}
func (*Error) adminLockerCellIDPutRes()              {}
func (*Error) adminLockerCellIDStatusPutRes()        {}
func (*Error) adminLockerCellPostRes()               {}
func (*Error) adminLockerCellTrackGetRes()           {}
func (*Error) adminLockerCellTrackIDPhotoRawGetRes() {}
func (*Error) adminLockerGetRes()                    {}
func (*Error) adminLockerIDFilePutRes()              {}
func (*Error) adminLockerIDGetRes()                  {}
func (*Error) adminLockerIDPutRes()                  {}
func (*Error) adminLockerPostRes()                   {}
func (*Error) adminPaymentGetRes()                   {}
func (*Error) adminSMSGetRes()                       {}
func (*Error) adminSMSPhonePutRes()                  {}
func (*Error) adminThingGetRes()                     {}
func (*Error) adminThingIDFileDeleteRes()            {}
func (*Error) adminThingIDFilePutRes()               {}
func (*Error) adminThingIDGetRes()                   {}
func (*Error) adminThingIDPutRes()                   {}
func (*Error) adminThingPostRes()                    {}
func (*Error) adminUserGetRes()                      {}
func (*Error) adminUserIDGetRes()                    {}
func (*Error) pingGetRes()                           {}

// Merged schema.
type GetAppLockerCell struct {
	Limit         int              `json:"limit"`
	Offset        int              `json:"offset"`
	Count         int64            `json:"count"`
	Data          []AppLockerCell  `json:"data"`
	Action        OptAppAction     `json:"action"`
	AppActiveRent OptAppActiveRent `json:"app_active_rent"`
}

// GetLimit returns the value of Limit.
func (s *GetAppLockerCell) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *GetAppLockerCell) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *GetAppLockerCell) GetCount() int64 {
	return s.Count
}

// GetData returns the value of Data.
func (s *GetAppLockerCell) GetData() []AppLockerCell {
	return s.Data
}

// GetAction returns the value of Action.
func (s *GetAppLockerCell) GetAction() OptAppAction {
	return s.Action
}

// GetAppActiveRent returns the value of AppActiveRent.
func (s *GetAppLockerCell) GetAppActiveRent() OptAppActiveRent {
	return s.AppActiveRent
}

// SetLimit sets the value of Limit.
func (s *GetAppLockerCell) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *GetAppLockerCell) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *GetAppLockerCell) SetCount(val int64) {
	s.Count = val
}

// SetData sets the value of Data.
func (s *GetAppLockerCell) SetData(val []AppLockerCell) {
	s.Data = val
}

// SetAction sets the value of Action.
func (s *GetAppLockerCell) SetAction(val OptAppAction) {
	s.Action = val
}

// SetAppActiveRent sets the value of AppActiveRent.
func (s *GetAppLockerCell) SetAppActiveRent(val OptAppActiveRent) {
	s.AppActiveRent = val
}

func (*GetAppLockerCell) appLockerIDCellGetRes() {}

// Merged schema.
type GetSms struct {
	Data   []SmsCode `json:"data"`
	Limit  int       `json:"limit"`
	Offset int       `json:"offset"`
	Count  int64     `json:"count"`
}

// GetData returns the value of Data.
func (s *GetSms) GetData() []SmsCode {
	return s.Data
}

// GetLimit returns the value of Limit.
func (s *GetSms) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *GetSms) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *GetSms) GetCount() int64 {
	return s.Count
}

// SetData sets the value of Data.
func (s *GetSms) SetData(val []SmsCode) {
	s.Data = val
}

// SetLimit sets the value of Limit.
func (s *GetSms) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *GetSms) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *GetSms) SetCount(val int64) {
	s.Count = val
}

func (*GetSms) adminSMSGetRes() {}

type IDRes struct {
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *IDRes) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *IDRes) SetID(val int) {
	s.ID = val
}

func (*IDRes) adminLockerPostRes() {}

// Ref: #/components/schemas/LockerCell
type LockerCell struct {
	ID          int              `json:"id"`
	CellUID     string           `json:"cell_uid"`
	LockerID    int              `json:"locker_id"`
	LockerName  string           `json:"locker_name"`
	ThingID     OptInt           `json:"thing_id"`
	ThingName   OptString        `json:"thing_name"`
	Name        string           `json:"name"`
	Description OptString        `json:"description"`
	StatusID    LockerCellStatus `json:"status_id"`
	StatusName  string           `json:"status_name"`
	CreatedAt   time.Time        `json:"created_at"`
	UpdatedAt   time.Time        `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *LockerCell) GetID() int {
	return s.ID
}

// GetCellUID returns the value of CellUID.
func (s *LockerCell) GetCellUID() string {
	return s.CellUID
}

// GetLockerID returns the value of LockerID.
func (s *LockerCell) GetLockerID() int {
	return s.LockerID
}

// GetLockerName returns the value of LockerName.
func (s *LockerCell) GetLockerName() string {
	return s.LockerName
}

// GetThingID returns the value of ThingID.
func (s *LockerCell) GetThingID() OptInt {
	return s.ThingID
}

// GetThingName returns the value of ThingName.
func (s *LockerCell) GetThingName() OptString {
	return s.ThingName
}

// GetName returns the value of Name.
func (s *LockerCell) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *LockerCell) GetDescription() OptString {
	return s.Description
}

// GetStatusID returns the value of StatusID.
func (s *LockerCell) GetStatusID() LockerCellStatus {
	return s.StatusID
}

// GetStatusName returns the value of StatusName.
func (s *LockerCell) GetStatusName() string {
	return s.StatusName
}

// GetCreatedAt returns the value of CreatedAt.
func (s *LockerCell) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *LockerCell) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *LockerCell) SetID(val int) {
	s.ID = val
}

// SetCellUID sets the value of CellUID.
func (s *LockerCell) SetCellUID(val string) {
	s.CellUID = val
}

// SetLockerID sets the value of LockerID.
func (s *LockerCell) SetLockerID(val int) {
	s.LockerID = val
}

// SetLockerName sets the value of LockerName.
func (s *LockerCell) SetLockerName(val string) {
	s.LockerName = val
}

// SetThingID sets the value of ThingID.
func (s *LockerCell) SetThingID(val OptInt) {
	s.ThingID = val
}

// SetThingName sets the value of ThingName.
func (s *LockerCell) SetThingName(val OptString) {
	s.ThingName = val
}

// SetName sets the value of Name.
func (s *LockerCell) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *LockerCell) SetDescription(val OptString) {
	s.Description = val
}

// SetStatusID sets the value of StatusID.
func (s *LockerCell) SetStatusID(val LockerCellStatus) {
	s.StatusID = val
}

// SetStatusName sets the value of StatusName.
func (s *LockerCell) SetStatusName(val string) {
	s.StatusName = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *LockerCell) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *LockerCell) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/LockerCellInput
type LockerCellInput struct {
	CellUID     string `json:"cell_uid"`
	LockerID    int    `json:"locker_id"`
	ThingID     OptInt `json:"thing_id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetCellUID returns the value of CellUID.
func (s *LockerCellInput) GetCellUID() string {
	return s.CellUID
}

// GetLockerID returns the value of LockerID.
func (s *LockerCellInput) GetLockerID() int {
	return s.LockerID
}

// GetThingID returns the value of ThingID.
func (s *LockerCellInput) GetThingID() OptInt {
	return s.ThingID
}

// GetName returns the value of Name.
func (s *LockerCellInput) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *LockerCellInput) GetDescription() string {
	return s.Description
}

// SetCellUID sets the value of CellUID.
func (s *LockerCellInput) SetCellUID(val string) {
	s.CellUID = val
}

// SetLockerID sets the value of LockerID.
func (s *LockerCellInput) SetLockerID(val int) {
	s.LockerID = val
}

// SetThingID sets the value of ThingID.
func (s *LockerCellInput) SetThingID(val OptInt) {
	s.ThingID = val
}

// SetName sets the value of Name.
func (s *LockerCellInput) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *LockerCellInput) SetDescription(val string) {
	s.Description = val
}

// 1 - Свободен  \
// 2 - Арендован \
// 3 - Заблокирован.
// Ref: #/components/schemas/LockerCellStatus
type LockerCellStatus int

const (
	LockerCellStatus1 LockerCellStatus = 1
	LockerCellStatus2 LockerCellStatus = 2
	LockerCellStatus3 LockerCellStatus = 3
)

// AllValues returns all LockerCellStatus values.
func (LockerCellStatus) AllValues() []LockerCellStatus {
	return []LockerCellStatus{
		LockerCellStatus1,
		LockerCellStatus2,
		LockerCellStatus3,
	}
}

// NewOptAdminThingIDFilePutReq returns new OptAdminThingIDFilePutReq with value set to v.
func NewOptAdminThingIDFilePutReq(v AdminThingIDFilePutReq) OptAdminThingIDFilePutReq {
	return OptAdminThingIDFilePutReq{
		Value: v,
		Set:   true,
	}
}

// OptAdminThingIDFilePutReq is optional AdminThingIDFilePutReq.
type OptAdminThingIDFilePutReq struct {
	Value AdminThingIDFilePutReq
	Set   bool
}

// IsSet returns true if OptAdminThingIDFilePutReq was set.
func (o OptAdminThingIDFilePutReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAdminThingIDFilePutReq) Reset() {
	var v AdminThingIDFilePutReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAdminThingIDFilePutReq) SetTo(v AdminThingIDFilePutReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAdminThingIDFilePutReq) Get() (v AdminThingIDFilePutReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAdminThingIDFilePutReq) Or(d AdminThingIDFilePutReq) AdminThingIDFilePutReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppAction returns new OptAppAction with value set to v.
func NewOptAppAction(v AppAction) OptAppAction {
	return OptAppAction{
		Value: v,
		Set:   true,
	}
}

// OptAppAction is optional AppAction.
type OptAppAction struct {
	Value AppAction
	Set   bool
}

// IsSet returns true if OptAppAction was set.
func (o OptAppAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppAction) Reset() {
	var v AppAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppAction) SetTo(v AppAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppAction) Get() (v AppAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppAction) Or(d AppAction) AppAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppActiveRent returns new OptAppActiveRent with value set to v.
func NewOptAppActiveRent(v AppActiveRent) OptAppActiveRent {
	return OptAppActiveRent{
		Value: v,
		Set:   true,
	}
}

// OptAppActiveRent is optional AppActiveRent.
type OptAppActiveRent struct {
	Value AppActiveRent
	Set   bool
}

// IsSet returns true if OptAppActiveRent was set.
func (o OptAppActiveRent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppActiveRent) Reset() {
	var v AppActiveRent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppActiveRent) SetTo(v AppActiveRent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppActiveRent) Get() (v AppActiveRent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppActiveRent) Or(d AppActiveRent) AppActiveRent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppButtonAction returns new OptAppButtonAction with value set to v.
func NewOptAppButtonAction(v AppButtonAction) OptAppButtonAction {
	return OptAppButtonAction{
		Value: v,
		Set:   true,
	}
}

// OptAppButtonAction is optional AppButtonAction.
type OptAppButtonAction struct {
	Value AppButtonAction
	Set   bool
}

// IsSet returns true if OptAppButtonAction was set.
func (o OptAppButtonAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppButtonAction) Reset() {
	var v AppButtonAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppButtonAction) SetTo(v AppButtonAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppButtonAction) Get() (v AppButtonAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppButtonAction) Or(d AppButtonAction) AppButtonAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeepLink returns new OptDeepLink with value set to v.
func NewOptDeepLink(v DeepLink) OptDeepLink {
	return OptDeepLink{
		Value: v,
		Set:   true,
	}
}

// OptDeepLink is optional DeepLink.
type OptDeepLink struct {
	Value DeepLink
	Set   bool
}

// IsSet returns true if OptDeepLink was set.
func (o OptDeepLink) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeepLink) Reset() {
	var v DeepLink
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeepLink) SetTo(v DeepLink) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeepLink) Get() (v DeepLink, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeepLink) Or(d DeepLink) DeepLink {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDuration returns new OptDuration with value set to v.
func NewOptDuration(v time.Duration) OptDuration {
	return OptDuration{
		Value: v,
		Set:   true,
	}
}

// OptDuration is optional time.Duration.
type OptDuration struct {
	Value time.Duration
	Set   bool
}

// IsSet returns true if OptDuration was set.
func (o OptDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDuration) Reset() {
	var v time.Duration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDuration) SetTo(v time.Duration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDuration) Get() (v time.Duration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDuration) Or(d time.Duration) time.Duration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLockerCellStatus returns new OptLockerCellStatus with value set to v.
func NewOptLockerCellStatus(v LockerCellStatus) OptLockerCellStatus {
	return OptLockerCellStatus{
		Value: v,
		Set:   true,
	}
}

// OptLockerCellStatus is optional LockerCellStatus.
type OptLockerCellStatus struct {
	Value LockerCellStatus
	Set   bool
}

// IsSet returns true if OptLockerCellStatus was set.
func (o OptLockerCellStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLockerCellStatus) Reset() {
	var v LockerCellStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLockerCellStatus) SetTo(v LockerCellStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLockerCellStatus) Get() (v LockerCellStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLockerCellStatus) Or(d LockerCellStatus) LockerCellStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentStatus returns new OptPaymentStatus with value set to v.
func NewOptPaymentStatus(v PaymentStatus) OptPaymentStatus {
	return OptPaymentStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentStatus is optional PaymentStatus.
type OptPaymentStatus struct {
	Value PaymentStatus
	Set   bool
}

// IsSet returns true if OptPaymentStatus was set.
func (o OptPaymentStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentStatus) Reset() {
	var v PaymentStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentStatus) SetTo(v PaymentStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentStatus) Get() (v PaymentStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentStatus) Or(d PaymentStatus) PaymentStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// - prepare - подготовка оплаты на стороне сервера quri.
// - pending - запрос уже ушел в yookassa, и ждет подтверждения.
// - success - оплата успешно произошла.
// - canceled - платеж отменен со стороны yookassa .
// - error - ошибка оплаты.
// - debt - оплата не произошла, так как на карте не
// оказалось достаточно средств.
// Ref: #/components/schemas/PaymentStatus
type PaymentStatus string

const (
	PaymentStatusPrepare  PaymentStatus = "prepare"
	PaymentStatusPending  PaymentStatus = "pending"
	PaymentStatusSuccess  PaymentStatus = "success"
	PaymentStatusCanceled PaymentStatus = "canceled"
	PaymentStatusError    PaymentStatus = "error"
	PaymentStatusDebt     PaymentStatus = "debt"
)

// AllValues returns all PaymentStatus values.
func (PaymentStatus) AllValues() []PaymentStatus {
	return []PaymentStatus{
		PaymentStatusPrepare,
		PaymentStatusPending,
		PaymentStatusSuccess,
		PaymentStatusCanceled,
		PaymentStatusError,
		PaymentStatusDebt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentStatusPrepare:
		return []byte(s), nil
	case PaymentStatusPending:
		return []byte(s), nil
	case PaymentStatusSuccess:
		return []byte(s), nil
	case PaymentStatusCanceled:
		return []byte(s), nil
	case PaymentStatusError:
		return []byte(s), nil
	case PaymentStatusDebt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentStatus) UnmarshalText(data []byte) error {
	switch PaymentStatus(data) {
	case PaymentStatusPrepare:
		*s = PaymentStatusPrepare
		return nil
	case PaymentStatusPending:
		*s = PaymentStatusPending
		return nil
	case PaymentStatusSuccess:
		*s = PaymentStatusSuccess
		return nil
	case PaymentStatusCanceled:
		*s = PaymentStatusCanceled
		return nil
	case PaymentStatusError:
		*s = PaymentStatusError
		return nil
	case PaymentStatusDebt:
		*s = PaymentStatusDebt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PaymentType
type PaymentType string

const (
	PaymentTypeCreateCard PaymentType = "create_card"
	PaymentTypePayRent    PaymentType = "pay_rent"
)

// AllValues returns all PaymentType values.
func (PaymentType) AllValues() []PaymentType {
	return []PaymentType{
		PaymentTypeCreateCard,
		PaymentTypePayRent,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentTypeCreateCard:
		return []byte(s), nil
	case PaymentTypePayRent:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentType) UnmarshalText(data []byte) error {
	switch PaymentType(data) {
	case PaymentTypeCreateCard:
		*s = PaymentTypeCreateCard
		return nil
	case PaymentTypePayRent:
		*s = PaymentTypePayRent
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Phone string

type PingGetOK struct{}

func (*PingGetOK) pingGetRes() {}

// Ref: #/components/schemas/SmsCode
type SmsCode struct {
	Phone string `json:"phone"`
	Code  int    `json:"code"`
	// Число попыток ввести правильный код.
	ValidateTryCount int `json:"validate_try_count"`
	// Число отправок смс, за промежуток времени n.
	ValidateSendCount int `json:"validate_send_count"`
	// Дата последней отправки.
	ValidateSendTime time.Time `json:"validate_send_time"`
	// Общее количество отправки смс.
	SendCount int       `json:"send_count"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetPhone returns the value of Phone.
func (s *SmsCode) GetPhone() string {
	return s.Phone
}

// GetCode returns the value of Code.
func (s *SmsCode) GetCode() int {
	return s.Code
}

// GetValidateTryCount returns the value of ValidateTryCount.
func (s *SmsCode) GetValidateTryCount() int {
	return s.ValidateTryCount
}

// GetValidateSendCount returns the value of ValidateSendCount.
func (s *SmsCode) GetValidateSendCount() int {
	return s.ValidateSendCount
}

// GetValidateSendTime returns the value of ValidateSendTime.
func (s *SmsCode) GetValidateSendTime() time.Time {
	return s.ValidateSendTime
}

// GetSendCount returns the value of SendCount.
func (s *SmsCode) GetSendCount() int {
	return s.SendCount
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SmsCode) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SmsCode) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetPhone sets the value of Phone.
func (s *SmsCode) SetPhone(val string) {
	s.Phone = val
}

// SetCode sets the value of Code.
func (s *SmsCode) SetCode(val int) {
	s.Code = val
}

// SetValidateTryCount sets the value of ValidateTryCount.
func (s *SmsCode) SetValidateTryCount(val int) {
	s.ValidateTryCount = val
}

// SetValidateSendCount sets the value of ValidateSendCount.
func (s *SmsCode) SetValidateSendCount(val int) {
	s.ValidateSendCount = val
}

// SetValidateSendTime sets the value of ValidateSendTime.
func (s *SmsCode) SetValidateSendTime(val time.Time) {
	s.ValidateSendTime = val
}

// SetSendCount sets the value of SendCount.
func (s *SmsCode) SetSendCount(val int) {
	s.SendCount = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SmsCode) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SmsCode) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/SmsCodeUpdate
type SmsCodeUpdate struct {
	// Очистить поля валидации.
	ClearValidate bool `json:"clear_validate"`
}

// GetClearValidate returns the value of ClearValidate.
func (s *SmsCodeUpdate) GetClearValidate() bool {
	return s.ClearValidate
}

// SetClearValidate sets the value of ClearValidate.
func (s *SmsCodeUpdate) SetClearValidate(val bool) {
	s.ClearValidate = val
}

// Ref: #/components/schemas/Thing
type Thing struct {
	ID          int      `json:"id"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Price       float64  `json:"price"`
	PhotoMain   string   `json:"photo_main"`
	Photos      []string `json:"photos"`
	Active      bool     `json:"active"`
}

// GetID returns the value of ID.
func (s *Thing) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *Thing) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Thing) GetDescription() string {
	return s.Description
}

// GetPrice returns the value of Price.
func (s *Thing) GetPrice() float64 {
	return s.Price
}

// GetPhotoMain returns the value of PhotoMain.
func (s *Thing) GetPhotoMain() string {
	return s.PhotoMain
}

// GetPhotos returns the value of Photos.
func (s *Thing) GetPhotos() []string {
	return s.Photos
}

// GetActive returns the value of Active.
func (s *Thing) GetActive() bool {
	return s.Active
}

// SetID sets the value of ID.
func (s *Thing) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Thing) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Thing) SetDescription(val string) {
	s.Description = val
}

// SetPrice sets the value of Price.
func (s *Thing) SetPrice(val float64) {
	s.Price = val
}

// SetPhotoMain sets the value of PhotoMain.
func (s *Thing) SetPhotoMain(val string) {
	s.PhotoMain = val
}

// SetPhotos sets the value of Photos.
func (s *Thing) SetPhotos(val []string) {
	s.Photos = val
}

// SetActive sets the value of Active.
func (s *Thing) SetActive(val bool) {
	s.Active = val
}

// Ref: #/components/schemas/ThingInput
type ThingInput struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	Active      bool    `json:"active"`
}

// GetName returns the value of Name.
func (s *ThingInput) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ThingInput) GetDescription() string {
	return s.Description
}

// GetPrice returns the value of Price.
func (s *ThingInput) GetPrice() float64 {
	return s.Price
}

// GetActive returns the value of Active.
func (s *ThingInput) GetActive() bool {
	return s.Active
}

// SetName sets the value of Name.
func (s *ThingInput) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ThingInput) SetDescription(val string) {
	s.Description = val
}

// SetPrice sets the value of Price.
func (s *ThingInput) SetPrice(val float64) {
	s.Price = val
}

// SetActive sets the value of Active.
func (s *ThingInput) SetActive(val bool) {
	s.Active = val
}

type Unauthorized struct{}

func (*Unauthorized) appLockerCellIDFinishPutRes() {}
func (*Unauthorized) appLockerCellIDRentPutRes()   {}
func (*Unauthorized) appPaymentCardGetRes()        {}
func (*Unauthorized) appPaymentCardIDDeleteRes()   {}
func (*Unauthorized) appPaymentCardIDPutRes()      {}
func (*Unauthorized) appPaymentCardPostRes()       {}
func (*Unauthorized) appRentGetRes()               {}
func (*Unauthorized) appUserGetRes()               {}
func (*Unauthorized) appUserPutRes()               {}

type XAppVersion struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *XAppVersion) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *XAppVersion) SetAPIKey(val string) {
	s.APIKey = val
}

type XOsVersion struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *XOsVersion) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *XOsVersion) SetAPIKey(val string) {
	s.APIKey = val
}
